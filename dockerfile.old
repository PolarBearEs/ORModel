# Stage 1: Builder - Installs dependencies and builds artifacts
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Set paths for uv cache and installation (optional, helps control location)
#    UV_CACHE_DIR=/tmp/uv_cache \
#    PIP_TARGET=/opt/pip_target \
    # WORKDIR for this stage
    WORKDIR=/app

WORKDIR ${WORKDIR}

# Install system dependencies needed for building Python packages (e.g., postgres client dev files)
# Adjust or remove if not using postgres drivers (asyncpg, psycopg2)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install uv using pip
RUN pip install uv==0.5.27  --no-cache-dir --disable-pip-version-check --only-binary :all:

# Copy only the pyproject.toml first to leverage Docker cache
COPY pyproject.toml ./

# Install dependencies including 'dev' group (needed for Alembic + driver) into a target directory
# Exclude editable install of the main project '.' as we copy source later
# Using --system would install globally, --target installs to a specific dir we can copy
# Note: Using --target means executables like 'alembic', 'uvicorn' are also in PIP_TARGET/bin
RUN python -m uv pip install --no-cache --target /opt/pip_target -r pyproject.toml
#RUN python -m uv pip install --no-cache --exclude-editable ".[dev]" --target ${PIP_TARGET}
#RUN python -m uv pip install --target ${PIP_TARGET}

# Copy the application source code
COPY ormodel ./ormodel
COPY examples ./examples


# --- Stage 2: Runtime - Creates the final lean image ---
FROM python:3.11-slim as runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Set path to find installed packages
    PYTHONPATH=/opt/pip_target \
    VIRTUAL_ENV=$PYTHONPATH \
    # Add installed executables to PATH
    PATH=/opt/pip_target/bin:$PATH \
    # WORKDIR for this stage
    WORKDIR=/app \
    # --- IMPORTANT ---
    # Default DB URLs - Strongly recommend overriding these at runtime!
    DATABASE_URL="sqlite+aiosqlite:///./example_app.db" \
    ALEMBIC_DATABASE_URL="sqlite:///./example_app.db"

WORKDIR ${WORKDIR}

# Install runtime system dependencies (e.g., postgres client runtime library)
# Adjust or remove if not using postgres
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy installed Python dependencies from the builder stage
COPY --from=builder ${PIP_TARGET} ${PIP_TARGET}

# Copy application code from the builder stage
COPY --from=builder ${WORKDIR}/ormodel ./ormodel
COPY --from=builder ${WORKDIR}/examples ./examples

# Copy the entrypoint script and make it executable
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose the port the application runs on (default 8000)
EXPOSE 8000

# Set the entrypoint script to run migrations then the main command
ENTRYPOINT ["/entrypoint.sh"]

# Default command to run the application (passed to entrypoint.sh)
# Uses uvicorn installed by uv into PIP_TARGET/bin (which is now in PATH)
CMD ["uvicorn", "examples.main:app", "--host", "0.0.0.0", "--port", "8000"]