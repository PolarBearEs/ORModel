# A generic Alembic configuration file.
# https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file

[alembic]
# path to migration scripts
script_location = alembic

# template for migration file names, e.g. YYYYMMDDHHMMSS_revision_name.py
# Include user name: {user}
# eg. file_template = %%(year)d%%(month).2d%%(day).2d_%%(rev)s_%%(slug)s_{user}
file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library.
# Leave blank for relative times unless you are coordination specific dates
# Supported timezones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# timezone =

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
# prepend_sys_path = .

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


# --- Database Configuration ---
# This section is used by Alembic's env.py script.

# SQLAlchemy database URL.
# Allows for environment variable substitution like %(DB_USER)s
# DO NOT HARDCODE passwords here. Use environment variables or secrets management.
# We use %(SQLA_URL)s which will be injected by env.py from the ormodel settings.
sqlalchemy.url = %(SQLA_URL)s

# Other SQLAlchemy options can be placed here if needed,
# prefixed by "sqlalchemy.". See SQLAlchemy documentation.
# sqlalchemy.pool_size = 5
# sqlalchemy.echo = true

# Available variables:
# ${alembic_root} - the directory containing this alembic.ini file
# ${cwd} - the current working directory


# Custom settings can be added here and accessed in env.py
# via context.config.get_main_option("my_setting")
# my_setting = my_value